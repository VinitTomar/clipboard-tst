const { deterministicPartitionKey } = require("./dpk");

describe("deterministicPartitionKey", () => {
  it("Returns the literal '0' when given no input", () => {
    const trivialKey = deterministicPartitionKey();
    expect(trivialKey).toBe("0");
  });

  it("should return a hash value when event does not have partitionKey", () => {
    const trivialKey = deterministicPartitionKey({data: 'some data'});
    expect(trivialKey).toBe("5d5763a61b07e2e5c38d37f0ee4a5609fd88f1deb4745c59bff5222ba8b94a4a8e75fb0eb0950f246c01ca9e2b6865630b37918fe7915a9e46b2a3cfb14a9a67");
  });

  it("should return event.partitionKey as string when it is an object", () => {
    const trivialKey = deterministicPartitionKey({ partitionKey: { data: 'some data' } });
    expect(trivialKey).toBe("{\"data\":\"some data\"}");
  });

  it("should return a hash when size of stringigy event.partitionKey is greater than MAX_PARTITION_KEY_LENGTH", () => {
    const trivialKey = deterministicPartitionKey({ partitionKey: { data} });
    expect(trivialKey).toBe("4588ee16fa9ea9533df6b35c132ad73626cbbb9e72e69862182d24329031a3a38b821801fa623400081d633f9e479ebd1b7146543cc642c31c4544298adf5ece");
  });
  
  it("should return event.partitionKey when it is not greater than MAX_PARTITION_KEY_LENGTH ", () => {
    const partitionKey = 12345;
    const trivialKey = deterministicPartitionKey(
      {
        partitionKey
      }
    );
    expect(trivialKey).toBe("12345");
  });

  it("should return hashKey when event.partitionKey length is greater than MAX_PARTITION_KEY_LENGTH ", () => {
    const partitionKey
    const trivialKey = deterministicPartitionKey(
      {
        partitionKey
      }
    );
    const expectkeyKey = "9d3e5d2c9c0c06bd83539c8c2634b0e955260a8e12b689f134dd0a2fed6b0895351034bddcdc1891d58d727ba4e21e61e4269fc55f6e469f4c043f6d9b5a55c5"
    expect(trivialKey).toBe(expectkeyKey);
  });
});
